-- Tabela de notificações do sistema
CREATE TABLE public.notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    group_id UUID NULL REFERENCES public.groups(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN (
        'group_invite',
        'expense_due', 
        'credit_card_due',
        'budget_alert',
        'finance_due',
        'general'
    )),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    data JSONB NULL,
    is_read BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE NULL,
    
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

-- Índices para otimizar consultas
CREATE INDEX idx_notifications_user_id ON public.notifications(user_id);
CREATE INDEX idx_notifications_user_unread ON public.notifications(user_id, is_read) WHERE is_read = FALSE;
CREATE INDEX idx_notifications_type ON public.notifications(type);
CREATE INDEX idx_notifications_created_at ON public.notifications(created_at DESC);
CREATE INDEX idx_notifications_expires_at ON public.notifications(expires_at) WHERE expires_at IS NOT NULL;

-- Políticas RLS (Row Level Security)
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Política: Usuários só podem ver suas próprias notificações
CREATE POLICY "Users can view own notifications" ON public.notifications
    FOR SELECT USING (auth.uid() = user_id);

-- Política: Usuários só podem inserir notificações para si mesmos
CREATE POLICY "Users can insert own notifications" ON public.notifications
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Política: Usuários só podem atualizar suas próprias notificações
CREATE POLICY "Users can update own notifications" ON public.notifications
    FOR UPDATE USING (auth.uid() = user_id);

-- Política: Usuários só podem deletar suas próprias notificações
CREATE POLICY "Users can delete own notifications" ON public.notifications
    FOR DELETE USING (auth.uid() = user_id);

-- Política especial: Membros do grupo podem criar notificações para outros membros do grupo
CREATE POLICY "Group members can create notifications for group" ON public.notifications
    FOR INSERT WITH CHECK (
        group_id IS NOT NULL AND
        EXISTS (
            SELECT 1 FROM public.group_members gm
            WHERE gm.group_id = notifications.group_id
            AND gm.user_id = auth.uid()
            AND gm.status = 'accepted'
        )
    );

-- Função para limpar notificações expiradas (executar via cron job)
CREATE OR REPLACE FUNCTION clean_expired_notifications()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM public.notifications 
    WHERE expires_at IS NOT NULL 
    AND expires_at < NOW();
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Função para marcar notificações como lidas em lote
CREATE OR REPLACE FUNCTION mark_notifications_as_read(notification_ids BIGINT[])
RETURNS INTEGER AS $$
DECLARE
    updated_count INTEGER;
BEGIN
    UPDATE public.notifications 
    SET is_read = TRUE, updated_at = NOW()
    WHERE id = ANY(notification_ids)
    AND user_id = auth.uid()
    AND is_read = FALSE;
    
    GET DIAGNOSTICS updated_count = ROW_COUNT;
    RETURN updated_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Função para obter contagem de notificações não lidas
CREATE OR REPLACE FUNCTION get_unread_notifications_count(p_user_id UUID DEFAULT NULL)
RETURNS INTEGER AS $$
DECLARE
    target_user_id UUID;
BEGIN
    target_user_id := COALESCE(p_user_id, auth.uid());
    
    RETURN (
        SELECT COUNT(*)::INTEGER
        FROM public.notifications
        WHERE user_id = target_user_id
        AND is_read = FALSE
        AND (expires_at IS NULL OR expires_at > NOW())
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Adicionar coluna updated_at se não existir
ALTER TABLE public.notifications 
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Criar trigger para updated_at
DROP TRIGGER IF EXISTS update_notifications_updated_at ON public.notifications;
CREATE TRIGGER update_notifications_updated_at
    BEFORE UPDATE ON public.notifications
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Comentários para documentação
COMMENT ON TABLE public.notifications IS 'Tabela de notificações do sistema para usuários';
COMMENT ON COLUMN public.notifications.type IS 'Tipo da notificação: group_invite, expense_due, credit_card_due, budget_alert, finance_due, general';
COMMENT ON COLUMN public.notifications.data IS 'Dados adicionais da notificação em formato JSON';
COMMENT ON COLUMN public.notifications.expires_at IS 'Data de expiração da notificação (opcional)';
COMMENT ON FUNCTION clean_expired_notifications() IS 'Remove notificações expiradas do sistema';
COMMENT ON FUNCTION mark_notifications_as_read(BIGINT[]) IS 'Marca múltiplas notificações como lidas';
COMMENT ON FUNCTION get_unread_notifications_count(UUID) IS 'Retorna o número de notificações não lidas do usuário';
