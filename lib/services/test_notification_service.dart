import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/notification.dart' as app_notification;
import 'notification_service.dart';

/// Servi√ßo para testar cria√ß√£o manual de notifica√ß√µes
class TestNotificationService {
  static final SupabaseClient _supabase = Supabase.instance.client;

  /// Testa cria√ß√£o de notifica√ß√£o simples
  static Future<void> testCreateSimpleNotification() async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('Usu√°rio n√£o autenticado');
      }

      print('üß™ Testando cria√ß√£o de notifica√ß√£o simples...');
      
      final notification = await NotificationService.createNotification(
        userId: userId,
        type: app_notification.NotificationType.general,
        title: 'Teste de Notifica√ß√£o',
        message: 'Esta √© uma notifica√ß√£o de teste criada manualmente.',
        data: {
          'test': true,
          'created_at': DateTime.now().toIso8601String(),
        },
      );

      print('‚úÖ Notifica√ß√£o criada com sucesso: ${notification.id}');
      print('üìã T√≠tulo: ${notification.title}');
      print('üí¨ Mensagem: ${notification.message}');
      
    } catch (e) {
      print('‚ùå Erro ao criar notifica√ß√£o de teste: $e');
      rethrow;
    }
  }

  /// Testa cria√ß√£o de notifica√ß√£o de vencimento de despesa
  static Future<void> testCreateExpenseDueNotification() async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('Usu√°rio n√£o autenticado');
      }

      print('üß™ Testando cria√ß√£o de notifica√ß√£o de vencimento...');
      
      final notification = await NotificationService.createExpenseDueNotification(
        userId: userId,
        expenseId: '999',
        expenseDescription: 'Conta de Luz - Teste',
        dueDate: DateTime.now().add(const Duration(days: 1)),
        amount: 150.50,
      );

      print('‚úÖ Notifica√ß√£o de vencimento criada: ${notification.id}');
      print('üìã T√≠tulo: ${notification.title}');
      print('üí¨ Mensagem: ${notification.message}');
      
    } catch (e) {
      print('‚ùå Erro ao criar notifica√ß√£o de vencimento: $e');
      rethrow;
    }
  }

  /// Testa cria√ß√£o de notifica√ß√£o de convite para grupo
  static Future<void> testCreateGroupInviteNotification() async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('Usu√°rio n√£o autenticado');
      }

      print('üß™ Testando cria√ß√£o de notifica√ß√£o de convite...');
      
      final notification = await NotificationService.createGroupInviteNotification(
        invitedUserId: userId,
        groupId: 'test-group-id',
        groupName: 'Grupo de Teste',
        inviterName: 'Usu√°rio Teste',
      );

      print('‚úÖ Notifica√ß√£o de convite criada: ${notification.id}');
      print('üìã T√≠tulo: ${notification.title}');
      print('üí¨ Mensagem: ${notification.message}');
      
    } catch (e) {
      print('‚ùå Erro ao criar notifica√ß√£o de convite: $e');
      rethrow;
    }
  }

  /// Testa carregamento de notifica√ß√µes
  static Future<void> testLoadNotifications() async {
    try {
      print('üß™ Testando carregamento de notifica√ß√µes...');
      
      final notifications = await NotificationService.loadNotifications();
      
      print('‚úÖ Notifica√ß√µes carregadas: ${notifications.length}');
      
      if (notifications.isEmpty) {
        print('üì≠ Nenhuma notifica√ß√£o encontrada');
      } else {
        print('üì¨ Notifica√ß√µes encontradas:');
        for (final notification in notifications) {
          print('  - ${notification.title} (${notification.type.value})');
          print('    ${notification.message}');
          print('    Criada em: ${notification.createdAt}');
          print('    Lida: ${notification.isRead}');
          print('');
        }
      }
      
    } catch (e) {
      print('‚ùå Erro ao carregar notifica√ß√µes: $e');
      rethrow;
    }
  }

  /// Testa contagem de notifica√ß√µes n√£o lidas
  static Future<void> testUnreadCount() async {
    try {
      print('üß™ Testando contagem de n√£o lidas...');
      
      final count = await NotificationService.getUnreadCount();
      
      print('‚úÖ Notifica√ß√µes n√£o lidas: $count');
      
    } catch (e) {
      print('‚ùå Erro ao obter contagem: $e');
      rethrow;
    }
  }

  /// Executa todos os testes
  static Future<void> runAllTests() async {
    print('üöÄ Iniciando testes de notifica√ß√£o...\n');
    
    try {
      // Teste 1: Carregar notifica√ß√µes existentes
      await testLoadNotifications();
      print('---\n');
      
      // Teste 2: Contagem de n√£o lidas
      await testUnreadCount();
      print('---\n');
      
      // Teste 3: Criar notifica√ß√£o simples
      await testCreateSimpleNotification();
      print('---\n');
      
      // Teste 4: Criar notifica√ß√£o de vencimento
      await testCreateExpenseDueNotification();
      print('---\n');
      
      // Teste 5: Criar notifica√ß√£o de convite
      await testCreateGroupInviteNotification();
      print('---\n');
      
      // Teste 6: Carregar novamente para ver as novas
      print('üîÑ Carregando notifica√ß√µes ap√≥s cria√ß√£o...');
      await testLoadNotifications();
      
      print('üéâ Todos os testes conclu√≠dos!');
      
    } catch (e) {
      print('üí• Falha nos testes: $e');
      rethrow;
    }
  }

  /// Verifica se a tabela de notifica√ß√µes existe e tem as colunas corretas
  static Future<void> checkNotificationTableStructure() async {
    try {
      print('üîç Verificando estrutura da tabela notifications...');
      
      // Tentar fazer uma consulta simples para verificar se a tabela existe
      final result = await _supabase
          .from('notifications')
          .select('id')
          .limit(1);
      
      print('‚úÖ Tabela notifications existe e √© acess√≠vel');
      print('üìä Registros encontrados: ${result.length}');
      
      // Tentar inserir e deletar um registro de teste
      final testData = {
        'user_id': _supabase.auth.currentUser?.id,
        'type': 'general',
        'title': 'Teste de Estrutura',
        'message': 'Testando se a inser√ß√£o funciona',
        'data': {'test': true},
      };
      
      final inserted = await _supabase
          .from('notifications')
          .insert(testData)
          .select()
          .single();
      
      print('‚úÖ Inser√ß√£o funcionando - ID: ${inserted['id']}');
      
      // Deletar o registro de teste
      await _supabase
          .from('notifications')
          .delete()
          .eq('id', inserted['id']);
      
      print('‚úÖ Dele√ß√£o funcionando');
      print('üéØ Estrutura da tabela est√° correta!');
      
    } catch (e) {
      print('‚ùå Erro na verifica√ß√£o da tabela: $e');
      
      if (e.toString().contains('relation "notifications" does not exist')) {
        print('üí° A tabela notifications n√£o existe. Execute o schema SQL primeiro.');
      } else if (e.toString().contains('permission denied')) {
        print('üí° Problema de permiss√µes RLS. Verifique as pol√≠ticas de seguran√ßa.');
      } else if (e.toString().contains('column') && e.toString().contains('does not exist')) {
        print('üí° Alguma coluna est√° faltando na tabela.');
      }
      
      rethrow;
    }
  }
}
